// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rendering the parent component here matching Snapshot to check any changes made 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      Array [
        Object {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      pointerEvents="box-none"
      style={
        Object {
          "zIndex": 1,
        }
      }
    >
      <View
        accessibilityElementsHidden={false}
        importantForAccessibility="auto"
        onLayout={[Function]}
        pointerEvents="box-none"
        style={null}
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#f0f8ff",
              "elevation": 10,
              "flexDirection": "row",
              "height": 80,
              "justifyContent": "space-between",
              "paddingLeft": 150,
              "paddingRight": 15,
              "paddingTop": 40,
            }
          }
        >
          <Text
            style={
              Object {
                "color": "black",
                "fontSize": 20,
                "fontWeight": "bold",
              }
            }
            testID="contacts"
          >
            Contacts
          </Text>
          <Text />
        </View>
      </View>
    </View>
    <View
      onLayout={[Function]}
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <View
        pointerEvents="box-none"
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
      >
        <View
          collapsable={false}
          style={
            Object {
              "opacity": 1,
            }
          }
        />
        <View
          accessibilityElementsHidden={false}
          closing={false}
          gestureVelocityImpact={0.3}
          importantForAccessibility="auto"
          onClose={[Function]}
          onGestureBegin={[Function]}
          onGestureCanceled={[Function]}
          onGestureEnd={[Function]}
          onOpen={[Function]}
          onTransition={[Function]}
          pointerEvents="box-none"
          style={
            Array [
              Object {
                "overflow": undefined,
              },
              Object {
                "bottom": 0,
                "left": 0,
                "position": "absolute",
                "right": 0,
                "top": 0,
              },
            ]
          }
          transitionSpec={
            Object {
              "close": Object {
                "animation": "spring",
                "config": Object {
                  "damping": 500,
                  "mass": 3,
                  "overshootClamping": true,
                  "restDisplacementThreshold": 10,
                  "restSpeedThreshold": 10,
                  "stiffness": 1000,
                },
              },
              "open": Object {
                "animation": "spring",
                "config": Object {
                  "damping": 500,
                  "mass": 3,
                  "overshootClamping": true,
                  "restDisplacementThreshold": 10,
                  "restSpeedThreshold": 10,
                  "stiffness": 1000,
                },
              },
            }
          }
        >
          <View
            needsOffscreenAlphaCompositing={false}
            pointerEvents="box-none"
            style={
              Object {
                "flex": 1,
              }
            }
          >
            <View
              collapsable={false}
              forwardedRef={[Function]}
              onGestureHandlerEvent={[Function]}
              onGestureHandlerStateChange={[Function]}
              style={
                Object {
                  "flex": 1,
                  "transform": Array [
                    Object {
                      "translateX": 0,
                    },
                    Object {
                      "translateX": 0,
                    },
                  ],
                }
              }
            >
              <View
                pointerEvents="none"
                style={
                  Object {
                    "backgroundColor": "rgb(242, 242, 242)",
                    "bottom": 0,
                    "left": 0,
                    "position": "absolute",
                    "shadowColor": "#000",
                    "shadowOffset": Object {
                      "height": 1,
                      "width": -1,
                    },
                    "shadowOpacity": 0.3,
                    "shadowRadius": 5,
                    "top": 0,
                    "width": 3,
                  }
                }
              />
              <View
                style={
                  Array [
                    Object {
                      "flex": 1,
                      "overflow": "hidden",
                    },
                    Array [
                      Object {
                        "backgroundColor": "rgb(242, 242, 242)",
                      },
                      undefined,
                    ],
                  ]
                }
              >
                <View
                  style={
                    Object {
                      "flex": 1,
                      "flexDirection": "column-reverse",
                    }
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                      }
                    }
                  >
                    <View>
                      <View
                        style={
                          Object {
                            "flexDirection": "row",
                            "justifyContent": "space-between",
                          }
                        }
                      >
                        <View
                          style={
                            Object {
                              "borderWidth": 1,
                              "flexDirection": "row",
                              "marginLeft": 10,
                              "marginTop": 20,
                            }
                          }
                        >
                          <Text />
                          <TextInput
                            allowFontScaling={true}
                            onChangeText={[Function]}
                            placeholder="Search"
                            rejectResponderTermination={true}
                            style={
                              Object {
                                "width": 250,
                              }
                            }
                            underlineColorAndroid="transparent"
                            value=""
                          />
                        </View>
                        <View
                          style={
                            Object {
                              "height": 50,
                              "marginRight": 5,
                              "marginTop": 30,
                              "width": 80,
                            }
                          }
                        >
                          <View
                            accessibilityRole="button"
                            accessibilityState={Object {}}
                            accessible={true}
                            focusable={true}
                            onClick={[Function]}
                            onResponderGrant={[Function]}
                            onResponderMove={[Function]}
                            onResponderRelease={[Function]}
                            onResponderTerminate={[Function]}
                            onResponderTerminationRequest={[Function]}
                            onStartShouldSetResponder={[Function]}
                            style={
                              Object {
                                "opacity": 1,
                              }
                            }
                          >
                            <View
                              style={
                                Array [
                                  Object {},
                                ]
                              }
                            >
                              <Text
                                style={
                                  Array [
                                    Object {
                                      "color": "#007AFF",
                                      "fontSize": 18,
                                      "margin": 8,
                                      "textAlign": "center",
                                    },
                                  ]
                                }
                              >
                                Cancel
                              </Text>
                            </View>
                          </View>
                        </View>
                      </View>
                      <View>
                        <RCTScrollView
                          collapsable={false}
                          data={Array []}
                          disableVirtualization={false}
                          getItem={[Function]}
                          getItemCount={[Function]}
                          horizontal={false}
                          initialNumToRender={10}
                          keyExtractor={[Function]}
                          maxToRenderPerBatch={10}
                          onContentSizeChange={[Function]}
                          onEndReachedThreshold={2}
                          onGestureHandlerEvent={[Function]}
                          onGestureHandlerStateChange={[Function]}
                          onLayout={[Function]}
                          onMomentumScrollEnd={[Function]}
                          onScroll={[Function]}
                          onScrollBeginDrag={[Function]}
                          onScrollEndDrag={[Function]}
                          removeClippedSubviews={false}
                          renderItem={[Function]}
                          renderScrollComponent={[Function]}
                          scrollEventThrottle={50}
                          stickyHeaderIndices={Array []}
                          updateCellsBatchingPeriod={50}
                          viewabilityConfigCallbackPairs={Array []}
                          windowSize={21}
                        >
                          <View />
                        </RCTScrollView>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </RNCSafeAreaProvider>
</View>
`;
